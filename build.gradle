buildscript {
	ext {
		springBootVersion = '1.5.2.RELEASE'
		cucumberVersion = '1.2.5'
		h2databaseVersion = '1.4.192'
		commonsLangVersion = '3.4'
		springfoxVersion = '2.6.1'
		jacocoAgentVersion = '0.7.6.201602180812'
		sonarScannerVersion = '2.2.1'
	}
	repositories {
		jcenter {
			url "http://jcenter.bintray.com/"
		}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("com.github.samueltbrown:gradle-cucumber-plugin:0.9")
		classpath group : 'org.jacoco', name : 'org.jacoco.agent', version : jacocoAgentVersion
		classpath group: 'org.sonarsource.scanner.gradle', name: 'sonarqube-gradle-plugin', version: sonarScannerVersion
	}
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: "com.github.samueltbrown.cucumber"
apply plugin: 'org.sonarqube'

allprojects {

	project.ext.exclusions = [
			'**/*DTO.java',
			'**/*Request.java',
			'**/*Response.java',
			'**/*Entity.java',
			'**/*Config.java',
			'**/*Application.java'
	]

	sonarqube {
		properties {
			property "sonar.host.url", "http://localhost:9000/"
			property "sonar.java.coveragePlugin", "jacoco"
			property "sonar.sourceEncoding", "UTF-8"
			property "sonar.scm.disabled", "true"
			property "sonar.buildbreaker.skip", "false"
			property "sonar.jacoco.reportPath", "$buildDir/jacoco/test.exec"
			property "sonar.jacoco.itReportPath", rootProject.findProject('sl-component-tests').buildDir.toString() + "/jacoco/test.exec"
			//property "sonar.jacoco.reportPaths", rootProject.findProject('sl-component-tests').buildDir.toString() + "/jacoco/test.exec"
			property 'sonar.coverage.exclusions', project.ext.exclusions
		}
	}
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'idea'
	apply plugin: "com.github.samueltbrown.cucumber"
	apply plugin: 'jacoco'

	repositories {
		jcenter {
			url "http://jcenter.bintray.com/"
		}
	}

	jacocoTestReport {
		reports {
			xml.enabled true
		}
	}

	jacoco {
		toolVersion = jacocoAgentVersion
		applyTo(tasks.withType(JavaExec))
	}

	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	compileJava.options.encoding = 'UTF-8'
	compileTestJava.options.encoding = 'UTF-8'

	dependencies {
		compile group: 'org.apache.commons', name: 'commons-lang3', version: commonsLangVersion
		testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springBootVersion)
	}
}

project(':sl-api') {

	dependencies {

		compile project(":sl-core")
		compile project(":sl-model")
		compile project(":sl-api-client")

		compile(group: 'org.springframework.boot', name: 'spring-boot-starter', version: springBootVersion) {
			exclude module: 'spring-boot-starter-logging'
		}
		compile group: 'org.springframework.boot', name: 'spring-boot-starter-jetty', version: springBootVersion

		compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: springBootVersion

		compile group: 'io.springfox', name: 'springfox-swagger-ui', version: springfoxVersion
		compile group: 'io.springfox', name: 'springfox-swagger2', version: springfoxVersion


	}
}

project(':sl-core') {

	dependencies {
		compile project(":sl-model")
		compile project(":sl-repository")

		compile(group: 'org.springframework.boot', name: 'spring-boot-starter', version: springBootVersion) {
			exclude module: 'spring-boot-starter-logging'
		}
	}
}

project(':sl-model') {

	dependencies {
		compile(group: 'org.springframework.boot', name: 'spring-boot-starter', version: springBootVersion) {
			exclude module: 'spring-boot-starter-logging'
		}
		compile(group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: springBootVersion)

		compile(group: 'org.springframework.boot', name: 'spring-boot-starter-data-rest', version: springBootVersion)
	}
}

project(':sl-repository') {

	dependencies {
		compile project(":sl-model")

		compile(group: 'org.springframework.boot', name: 'spring-boot-starter', version: springBootVersion) {
			exclude module: 'spring-boot-starter-logging'
		}
		compile(group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: springBootVersion)
		compile(group: 'com.h2database', name: 'h2', version: h2databaseVersion)
	}
}

project(':sl-api-client') {

	dependencies {

		compile(group: 'org.springframework.boot', name: 'spring-boot-starter', version: springBootVersion) {
			exclude module: 'spring-boot-starter-logging'
		}
	}
}

project(':sl-component-tests') {

	dependencies {

		compile project(":sl-api")

		compile(group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: springBootVersion)

		compile(group: 'info.cukes', name: 'cucumber-java', version: cucumberVersion)
		compile(group: 'info.cukes', name: 'cucumber-junit', version: cucumberVersion)
		compile(group: 'info.cukes', name: 'cucumber-spring', version: cucumberVersion)

		compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.7.5'

	}
}
